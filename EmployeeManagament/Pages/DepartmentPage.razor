@page "/departments"
@using EmployeeManagment.Shared;
@using System.Linq;
@inject ISnackbar Snackbar





<MudCard Elevation="25">
    <MudCardHeader>
        <MudCardContent>

            <MudText Typo="Typo.h6">
                Departments

            </MudText>
        </MudCardContent>

    </MudCardHeader>

    <MudCardContent>

        <EditForm OnValidSubmit="Add" Model="@department">
            <MudTextField @bind-Value="department.DepartmentName" Label="Name of Department"></MudTextField>
          <br/>
            <MudButton Color="Color.Info" Variant="Variant.Filled" OnClick="Add">Add Department</MudButton>
        </EditForm>
    </MudCardContent>

</MudCard>
<input @bind="searchString" @bind:event="oninput" />
<br/>

<MudTable Items="GetAll()" Filter="new Func<Department, bool>(Search)" @bind-department="department">
    <ToolBarContent>

        <MudText Typo="Typo.h6">Employees</MudText>
        <MudSpacer/>
        <MudTextField @bind-Value="searchString" Placeholder="Search for departments"></MudTextField>
    </ToolBarContent>
    <HeaderContent>

        <MudTh>Department Name</MudTh>
         <MudTh>Actions</MudTh>

    </HeaderContent>

    <RowTemplate>

        <MudTd DataLabel="Department Name">@context.DepartmentName</MudTd>
        <MudTd DataLabel="Actions">
            <MudFab OnClick="@(()=>Update(context))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small"></MudFab>
            <MudFab OnClick="@(()=>Delete(context))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small"></MudFab>
        </MudTd>
    </RowTemplate>
</MudTable>



@code {
    private string searchString = "";
    private Department department = new Department();

    private List<Department> departments = new List<Department>();


    protected override async Task OnInitializedAsync()
    {

        departments = departmentService.GetAll();


    }

    private bool Search(Department department)
    {

        if (string.IsNullOrWhiteSpace(searchString)) return true;

        if (department.DepartmentName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {

            return true;
        }

        return false;
    }

    private List<Department> GetAll()
    {

        departments = departmentService.GetAll();

        return departments;
    }

    private void Add()
    {

        if (department.DepartmentId==0)
        {
            departmentService.Add(department);
            Snackbar.Add("Department Added", Severity.Success);
        }
        else
        {

            departmentService.Update(department);
            Snackbar.Add("Department Updated", Severity.Success);
        }

        department = new Department();
        GetAll();
    }


    private void Update(Department record)
    {

        department = record;
        StateHasChanged();


    }

    private async Task Delete (Department record)
    {

        departmentService.Delete(record);

        GetAll();
    }
}
